plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize' // 帮助 data class 快速实现序列化 @Parcelize
    id 'kotlin-kapt' // kapt 即 Kotlin annotation processing tool（Kotlin 注解处理工具）缩写。
    id 'io.gitlab.arturbosch.detekt'
}

android {

    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.dqddu"
        minSdkVersion 21 // 本来应该是28,但测试机(坚果Pro2S)是27. 尴尬,哈哈=·=~ // 改为21,兼容阿红的Pad
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            // 开启混淆
            minifyEnabled true
            // 资源压缩
            shrinkResources true
            // 让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    // 优化编译速度
    // 优化`transformClassDexBuilderForDebug`的速度
    dexOptions {
        preDexLibraries true
        maxProcessCount 8
    }
}

// 优化编译速度 如果有用到kapt添加如下配置
kapt {
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

dependencies {

    // Kotlin 1.4.+ 之后, 不再需要主动声明 stdlib 的版本了
    // implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // ktx 相关的辅助类
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.collection:collection-ktx:1.1.0'
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.5'
    // lifecycle & ktx
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // moshi: 比 Gson 更适合 Kotlin 的序列化工具
    def moshi_version = "1.11.0"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    // retrofit
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    // okhttp
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    // logger: 打印出漂亮的日志 [https://github.com/orhanobut/logger]
    implementation 'com.orhanobut:logger:2.2.0'
    // coroutines
    def coroutines_version = "1.4.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // detekt 代码检查
    def detekt_version = "1.15.0-RC1"
    detekt "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
    detekt "io.gitlab.arturbosch.detekt:detekt-cli:$detekt_version"
}